<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.graylog.plugins</groupId>
        <artifactId>graylog-plugin-web-parent</artifactId>
        <version>5.0.13</version>
        <relativePath>../graylog2-server/graylog-plugin-parent/graylog-plugin-web-parent</relativePath>
    </parent>

    <groupId>de.irgendwr</groupId>
    <artifactId>graylog-plugin-telegram-notification</artifactId>
    <version>2.4.3-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>${project.artifactId}</name>
    <description>Allows you to send alert messages to a specified Telegram chat.</description>
    <url>https://irgendwr.github.io/TelegramAlert/</url>

    <developers>
        <developer>
            <name>Jonas BÃ¶gle</name>
            <email>graylog@jonas.boegle.me</email>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/irgendwr/TelegramAlert.git</connection>
        <developerConnection>scm:git:https://github.com/irgendwr/TelegramAlert.git</developerConnection>
        <url>https://github.com/irgendwr/TelegramAlert</url>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.release>17</maven.compiler.release>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <maven.compiler.useIncrementalCompilation>false</maven.compiler.useIncrementalCompilation>

        <!-- Plugins will not be deployed by default - set to `false` if you actually want to deploy it -->
        <maven.deploy.skip>true</maven.deploy.skip>

        <!-- Dependencies -->
        <graylog.version>${project.parent.version}</graylog.version>
        <graylog.plugin-dir>/usr/share/graylog-server/plugin</graylog.plugin-dir>
        <jackson.version>2.17.0</jackson.version>
        <!-- <jmte.version>7.0.2</jmte.version> -->
    </properties>

    <distributionManagement>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Nexus Release Repository</name>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>sonatype-nexus-releases</id>
            <name>Sonatype Nexus Releases</name>
            <url>https://oss.sonatype.org/content/repositories/releases</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.graylog2</groupId>
            <artifactId>graylog2-server</artifactId>
            <version>${graylog.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.graylog.autovalue</groupId>
            <artifactId>auto-value-javabean</artifactId>
            <version>${auto-value-javabean.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>${auto-service.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>2.1.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.inject</groupId>
            <artifactId>jakarta.inject-api</artifactId>
            <version>2.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${apache-httpclient.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>${apache-httpcore.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.14.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- Include source from test-jar to reuse test classes. -->
        <!--<dependency>
            <groupId>org.graylog2</groupId>
            <artifactId>graylog2-server</artifactId>
            <version>${graylog.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.floreysoft</groupId>
            <artifactId>jmte</artifactId>
            <version>${jmte.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource><directory>${web.build-dir}</directory></resource>
            <resource>
              <directory>src/main/resources</directory>
              <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <skipAssembly>true</skipAssembly>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Graylog-Plugin-Properties-Path>${project.groupId}.${project.artifactId}</Graylog-Plugin-Properties-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.2</version>
                <configuration>
                    <minimizeJar>false</minimizeJar>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <minimizeJar>false</minimizeJar>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                            </transformers>
                            <artifactSet>
                                <excludes>
                                    <exclude>com.google.guava:guava</exclude>
                                    <exclude>com.fasterxml.jackson.core:*</exclude>
                                    <exclude>org.apache.httpcomponents:httpclient</exclude>
                                    <exclude>joda-time:joda-time</exclude>
                                    <exclude>commons-codec:commons-codec</exclude>
                                    <exclude>com.google.protobuf:protobuf-java</exclude>
                                    <exclude>net.bytebuddy:byte-buddy</exclude>
                                </excludes>
                            </artifactSet>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <mavenExecutorId>forked-path</mavenExecutorId>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <preparationGoals>clean test</preparationGoals>
                    <goals>package</goals>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>jdeb</artifactId>
                <groupId>org.vafer</groupId>
                <version>1.4</version>
                <configuration>
                    <deb>${project.build.directory}/${project.artifactId}-${project.version}.deb</deb>
                    <dataSet>
                        <data>
                            <src>${project.build.directory}/${project.build.finalName}.jar</src>
                            <type>file</type>
                            <mapper>
                                <type>perm</type>
                                <prefix>${graylog.plugin-dir}</prefix>
                                <filemode>644</filemode>
                                <user>root</user>
                                <group>root</group>
                            </mapper>
                        </data>
                    </dataSet>
                </configuration>
            </plugin>

            <plugin>
                <groupId>de.thetaphi</groupId>
                <artifactId>forbiddenapis</artifactId>
                <configuration>
                    <suppressAnnotations>
                        <annotation>**.SuppressForbidden</annotation>
                    </suppressAnnotations>
                    <!-- if the used Java version is too new, don't fail, just do nothing: -->
                    <failOnUnsupportedJava>false</failOnUnsupportedJava>
                    <failOnViolation>true</failOnViolation>

                    <ignoreSignaturesOfMissingClasses>true</ignoreSignaturesOfMissingClasses>

                    <bundledSignatures>
                        <!-- We want to allow String#formatted without charset. -->
                        <bundledSignature>jdk-unsafe</bundledSignature>
                        <!-- This will automatically choose the right signatures based on 'maven.compiler.target': -->
                        <bundledSignature>jdk-deprecated</bundledSignature>
                        <bundledSignature>jdk-reflection</bundledSignature>
                        <!-- disallow undocumented classes like sun.misc.Unsafe: -->
                        <bundledSignature>jdk-non-portable</bundledSignature>
                        <!-- Workaround until signatures for ${commons-io.version} are released: -->
                        <bundledSignature>commons-io-unsafe-2.14.0</bundledSignature>
                    </bundledSignatures>
                    <signatures>
                        <![CDATA[
                            org.jboss.netty.** @ Migrate to Netty 4.x

                            @defaultMessage Use a custom thread factory to ensure proper thread naming.
                            java.util.concurrent.Executors#defaultThreadFactory()
                            java.util.concurrent.Executors#newCachedThreadPool()
                            java.util.concurrent.Executors#newFixedThreadPool(int)
                            java.util.concurrent.Executors#newScheduledThreadPool(int)
                            java.util.concurrent.Executors#newSingleThreadExecutor()
                            java.util.concurrent.Executors#newSingleThreadScheduledExecutor()
                            java.util.concurrent.Executors#privilegedThreadFactory()

                            @defaultMessage Constructing a DateTime without a time zone is dangerous
                            org.joda.time.DateTime#<init>()
                            org.joda.time.DateTime#<init>(long)
                            org.joda.time.DateTime#<init>(int, int, int, int, int)
                            org.joda.time.DateTime#<init>(int, int, int, int, int, int)
                            org.joda.time.DateTime#<init>(int, int, int, int, int, int, int)
                            org.joda.time.DateTime#now()
                            org.joda.time.DateTimeZone#getDefault()

                            @defaultMessage Please do not try to stop the world
                            java.lang.System#gc()

                            java.lang.Character#codePointBefore(char[],int) @ Implicit start offset is error-prone when the char[] is a buffer and the first chars are random chars
                            java.lang.Character#codePointAt(char[],int) @ Implicit end offset is error-prone when the char[] is a buffer and the last chars are random chars

                            @defaultMessage Only use wait / notify when really needed try to use concurrency primitives, latches or callbacks instead.
                            java.lang.Object#wait()
                            java.lang.Object#wait(long)
                            java.lang.Object#wait(long,int)
                            java.lang.Object#notify()
                            java.lang.Object#notifyAll()

                            @defaultMessage Beware of the behavior of this method on MIN_VALUE
                            java.lang.Math#abs(int)
                            java.lang.Math#abs(long)

                            @defaultMessage Use Channels.* methods to write to channels. Do not read/write directly.
                            java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)
                            java.nio.channels.FileChannel#write(java.nio.ByteBuffer, long)
                            java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[], int, int)
                            java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[])
                            java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)
                            java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[])
                            java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[], int, int)
                            java.nio.channels.FileChannel#read(java.nio.ByteBuffer, long)

                            @defaultMessage Convert to URI
                            java.net.URL#getPath()
                            java.net.URL#getFile()

                            @defaultMessage Use java.nio.file instead of java.io.File API
                            # java.util.jar.JarFile
                            # java.util.zip.ZipFile
                            # java.io.File
                            # java.io.FileInputStream
                            # java.io.FileOutputStream
                            java.io.PrintStream#<init>(java.lang.String,java.lang.String)
                            java.io.PrintWriter#<init>(java.lang.String,java.lang.String)
                            java.util.Formatter#<init>(java.lang.String,java.lang.String,java.util.Locale)
                            java.io.RandomAccessFile
                            # java.nio.file.Path#toFile()

                            @defaultMessage Specify a location for the temp file/directory instead.
                            java.nio.file.Files#createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])
                            java.nio.file.Files#createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])

                            com.google.common.collect.Iterators#emptyIterator() @ Use Collections.emptyIterator instead

                            @defaultMessage Don't use java serialization - this can break BWC without noticing it
                            java.io.ObjectOutputStream
                            java.io.ObjectOutput
                            java.io.ObjectInputStream
                            java.io.ObjectInput

                            @defaultMessage avoid DNS lookups by accident: if you have a valid reason, then use SuppressWarnings with that reason so its completely clear
                            java.net.InetAddress#getHostName()
                            java.net.InetAddress#getCanonicalHostName()

                            java.net.InetSocketAddress#getHostName() @ Use getHostString() instead, which avoids a DNS lookup

                            @defaultMessage Avoid unchecked warnings by using Collections#empty(List|Map|Set) methods
                            java.util.Collections#EMPTY_LIST
                            java.util.Collections#EMPTY_MAP
                            java.util.Collections#EMPTY_SET

                            java.util.Collections#shuffle(java.util.List) @ Use java.util.Collections#shuffle(java.util.List, java.util.Random) with a reproducible source of randomness

                            com.google.common.base.Charsets @ Use java.nio.charset.StandardCharsets

                            @defaultMessage Don't use imports from shaded or denied dependencies
                            joptsimple.internal.**
                            org.testcontainers.shaded.**
                            edu.emory.mathcs.backport.java.util.**
                            org.apache.directory.api.util.**
                            org.apache.groovy.util.**
                            org.apache.logging.log4j.util.Strings
                            org.graylog.shaded.kafka09.joptsimple.**
                            org.assertj.core.util.**
                            org.bouncycastle.util.Strings
                            org.junit.jupiter.params.shadow.**
                            # FIXME: I need this :(
                            # org.apache.http.util.**

                            @defaultMessage Use jakarta.inject.
                            com.google.inject.Inject
                            com.google.inject.Scope
                            com.google.inject.Singleton
                            com.google.inject.Provider
                            com.google.inject.name.Named
                            javax.inject.**

                            javax.persistence.** @ Use jakarta.persistence.

                            @defaultMessage Use jakarta.annotation.
                            javax.annotation.sql.**
                            javax.annotation.security.**
                            javax.annotation.Resources
                            javax.annotation.Resource
                            javax.annotation.Resource$AuthenticationType
                            javax.annotation.ManagedBean
                            javax.annotation.Generated
                            javax.annotation.PreDestroy
                            javax.annotation.Priority
                            javax.annotation.PostConstruct

                            @defaultMessage Use jakarta.validation.
                            javax.validation.**
                        ]]>

                    </signatures>
                </configuration>
                <executions>
                    <execution>
                        <id>forbidden-apis-src</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>forbidden-apis-test</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCheck</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>17</release>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                    <forceLegacyJavacApi>true</forceLegacyJavacApi>
                    <compilerArgs>
                        <arg>-XDcompilePolicy=simple</arg>
                        <!--
                          We disabled checks that don't apply to us because we either don't use the platform or
                          library. (e.g., Android, Flogger) Disabling those checks improves compile times.
                          See available bug patterns: https://errorprone.info/bugpatterns
                        -->
                        <arg>
                            -Xplugin:ErrorProne
                            -Xep:DoNotMock:WARN
                            -XepDisableWarningsInGeneratedCode
                            -XepExcludedPaths:.*/target/generated-sources/.*
                            -Xep:AndroidInjectionBeforeSuper:OFF
                            -Xep:BugPatternNaming:OFF
                            -Xep:BundleDeserializationCast:OFF
                            -Xep:DaggerProvidesNull:OFF
                            -Xep:FloggerArgumentToString:OFF
                            -Xep:FloggerFormatString:OFF
                            -Xep:FloggerLogString:OFF
                            -Xep:FloggerLogVarargs:OFF
                            -Xep:FloggerLogWithCause:OFF
                            -Xep:FloggerMessageFormat:OFF
                            -Xep:FloggerRedundantIsEnabled:OFF
                            -Xep:FloggerRequiredModifiers:OFF
                            -Xep:FloggerSplitLogStatement:OFF
                            -Xep:FloggerStringConcatenation:OFF
                            -Xep:FloggerWithCause:OFF
                            -Xep:FloggerWithoutCause:OFF
                            -Xep:FragmentInjection:OFF
                            -Xep:FragmentNotInstantiable:OFF
                            -Xep:ICCProfileGetInstance:OFF
                            -Xep:IsLoggableTagLength:OFF
                            -Xep:JUnit3FloatingPointComparisonWithoutDelta:OFF
                            -Xep:JUnit3TestNotRun:OFF
                            -Xep:JUnit4ClassUsedInJUnit3:OFF
                            -Xep:JUnitAmbiguousTestClass:OFF
                            -Xep:MislabeledAndroidString:OFF
                            -Xep:MissingRefasterAnnotation:OFF
                            -Xep:OutlineNone:OFF
                            -Xep:ParcelableCreator:OFF
                            -Xep:RectIntersectReturnValueIgnored:OFF
                            -Xep:RobolectricShadowDirectlyOn:OFF
                            -Xep:StringCaseLocaleUsage:OFF
                            -Xep:SwigMemoryLeak:OFF
                            -Xep:DefaultCharset:ERROR
                            -Xep:DoubleCheckedLocking:ERROR
                            -Xep:InconsistentHashCode:ERROR
                            -Xep:IncrementInForLoopAndHeader:ERROR
                            -Xep:NonAtomicVolatileUpdate:ERROR
                            -Xep:PrimitiveAtomicReference:ERROR
                        </arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>com.google.errorprone</groupId>
                            <artifactId>error_prone_core</artifactId>
                            <version>${error-prone.version}</version>
                        </path>
                        <path>
                            <groupId>com.google.auto.service</groupId>
                            <artifactId>auto-service</artifactId>
                            <version>${auto-service.version}</version>
                        </path>
                        <path>
                            <groupId>com.google.auto.value</groupId>
                            <artifactId>auto-value</artifactId>
                            <version>${auto-value.version}</version>
                        </path>
                        <path>
                            <groupId>org.graylog.autovalue</groupId>
                            <artifactId>auto-value-javabean</artifactId>
                            <version>${auto-value-javabean.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>rpm-maven-plugin</artifactId>
                <version>2.1.4</version>
                <configuration>
                    <group>Application/Internet</group>
                    <prefixes>
                        <prefix>/usr</prefix>
                    </prefixes>
                    <defineStatements>
                        <defineStatement>_unpackaged_files_terminate_build 0</defineStatement>
                        <defineStatement>_binaries_in_noarch_packages_terminate_build 0</defineStatement>
                    </defineStatements>
                    <defaultFilemode>644</defaultFilemode>
                    <defaultDirmode>755</defaultDirmode>
                    <defaultUsername>root</defaultUsername>
                    <defaultGroupname>root</defaultGroupname>
                    <mappings>
                        <mapping>
                            <directory>${graylog.plugin-dir}</directory>
                            <sources>
                                <source>
                                    <location>${project.build.directory}/</location>
                                    <includes>
                                        <include>${project.build.finalName}.jar</include>
                                    </includes>
                                </source>
                            </sources>
                        </mapping>
                    </mappings>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>web-interface-build</id>
            <activation>
                <property>
                    <name>!skip.web.build</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>

                        <executions>
                            <execution>
                                <id>install node and yarn</id>
                                <goals>
                                    <goal>install-node-and-yarn</goal>
                                </goals>
                                <configuration>
                                    <nodeVersion>18.18.2</nodeVersion>
                                    <yarnVersion>${yarn.version}</yarnVersion>
                                </configuration>
                            </execution>

                            <execution>
                                <id>yarn install</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <!-- Optional configuration which provides for running any npm command -->
                                <configuration>
                                    <arguments>install</arguments>
                                </configuration>
                            </execution>

                            <execution>
                                <id>yarn run build</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <configuration>
                                    <arguments>run build</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
